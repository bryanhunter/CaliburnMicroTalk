using System.Windows;
using Caliburn.Micro;

namespace BasicConfigurationActionsAndConventions.ViewModels
{
    public class ShellViewModel : PropertyChangedBase
    {
        private string _name;

        public ShellViewModel()
        {
            
        }

        public void LoadSecondContainer()
        {
            SecondContainer = new ConcatenateStringViewModel();
        }

        public void UnloadSecondContainer()
        {
            SecondContainer = null;
            NotifyOfPropertyChange(() => SecondContainer);
        }

        // ViewModel property wired to View's TextBox via convention
        // Convention wires the View's "Name" TextBox to the this string property 
        public string Name
        {
            get { return _name; }
            set
            {
                _name = value;
                NotifyOfPropertyChange(() => Name);
                NotifyOfPropertyChange(() => CanSayHello);
            }
        }

        // ViewModel method wired to the View's ButtonClick via convention
        // Convention wires the View's "SayHello" button to this method
        public void SayHello()
        {
            MessageBox.Show(string.Format("Hello {0}!", Name)); //Don't do this in real life :)
        }

        // Convention sets this CanSayHello as a guard for the SayHello method above
        public bool CanSayHello
        {
            get { return !string.IsNullOrWhiteSpace(Name); }
        }

        // In the ShellView.xaml a ContentControl with the name "SecondContainer" exists
        // The following public property has the same name. By convention the View that matches this 
        // type will be loaded into the ContentControl
        private object _secondContainer;
        public object SecondContainer
        {
            get { return _secondContainer; }
            set
            {
                _secondContainer = value;
                NotifyOfPropertyChange(() => SecondContainer);
            }
        }

        public void LoadPanel()
        {
            PanelBasedContainer = new BindableCollection<ConcatenateStringViewModel> { new ConcatenateStringViewModel() };
            NotifyOfPropertyChange(() => PanelBasedContainer);
        }

        public BindableCollection<ConcatenateStringViewModel> PanelBasedContainer
        {
            get; set;
        }
    }
}